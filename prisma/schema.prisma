generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id              String         @id @default(uuid()) @db.Char(36)
  name            String         @db.VarChar(100)
  email           String         @unique(map: "email") @db.VarChar(255)
  tel             String         @unique(map: "tel") @db.VarChar(20)
  country         String         @db.VarChar(64)
  address         String         @db.Text
  category        String         @db.VarChar(15)
  role_id         String         @db.Char(36) 
  pfp_url         String?        @db.Text
  doc_url         String?        @db.Text
  business_status Boolean?
  password        String         @db.Text
  status          String         @default("unverified") @db.VarChar(10)
  created_at      DateTime?      @default(now()) @db.Timestamp(0)

  role            role           @relation("UserRole", fields: [role_id], references: [id])

  organisation    organisation[]
  otp             otp[]
  password_token  password_token[]
  testimonial     testimonial[]
  service         service[]
  service_request service_request[]
  notification    notification[]
  subscription    subscription[]
  notification_settings    notification_settings[]
  privacy_settings    privacy_settings[]
  created_role        role[]     @relation("RoleCreator")
}

model organisation {
  id          String        @id @default(uuid()) @db.Char(36)
  name        String        @db.VarChar(100)
  email       String        @unique(map: "email") @db.VarChar(255)
  address     String        @db.Text
  country     String        @db.VarChar(64)
  industry    String        @db.Text
  logo_url    String        @db.Text
  rc_number   String        @unique(map: "rc_number") @db.VarChar(20)
  staff_size  String        @db.VarChar(15)
  type        String        @db.VarChar(50)
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  user_id     String        @db.Char(36)

  user        user          @relation(fields: [user_id], references: [id])
  contact     contact[]

  @@index([user_id])
}

model service {
  id               String             @id @default(uuid()) @db.Char(36)
  title            String             @db.VarChar(100)
  subtitle         String             @db.VarChar(100)
  description      String             @db.Text
  imageURL         String             @db.Text
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  admin_id         String             @db.Char(36)

  user             user               @relation(fields: [admin_id], references: [id])
  service_request  service_request[]
  testimonial      testimonial[]

  @@index([admin_id])
}

model service_request {
  id              Int          @id @default(autoincrement()) @db.UnsignedInt
  message         String       @db.Text
  service_id      String       @db.Char(36)
  user_id         String       @db.Char(36)

  service         service      @relation(fields: [service_id], references: [id])
  user            user         @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([service_id])
}

model testimonial {
  id              Int          @id @default(autoincrement()) @db.UnsignedInt
  message         String       @db.Text
  service_id      String       @db.Char(36)
  user_id         String       @db.Char(36)

  service         service      @relation(fields: [service_id], references: [id])
  user            user         @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([service_id])
}

model contact {
  id              String       @id @default(uuid()) @db.Char(36)
  name            String       @db.VarChar(100)
  pfp_url         String       @db.Text
  doc_url         String       @db.Text
  organisation_id String       @db.Char(36)
  
  organisation    organisation @relation(fields: [organisation_id], references: [id])

  @@index([organisation_id])
}

model otp {
  id         String    @id @default(uuid())
  otp        String    @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
  expires_at DateTime? @db.Timestamp(0)
  user_id    String    @db.Char(36)

  user       user      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model password_token {
  id         String    @id @default(uuid())
  token      String    @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
  expires_at DateTime? @db.Timestamp(0)
  user_id    String    @db.Char(36)

  user       user      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model notification {
  id           String     @id @default(uuid()) @db.Char(36)
  activity     String     @db.Text
  completed_at DateTime?  @default(now()) @db.Timestamp(0) 
  user_id      String     @db.Char(36)
  
  user         user       @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model privacy_settings {
  id               Int       @id @default(autoincrement())@db.UnsignedInt
  ads              Boolean   @default(true)
  data_sharing     Boolean   @default(true)
  marketing_status Boolean   @default(true)
  activity_status  Boolean   @default(true)
  user_id          String    @db.Char(36)

  user             user      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model notification_settings {
  id              String    @id @default(uuid()) @db.Char(36)
  alerts          Boolean   @default(true)
  messages        Boolean   @default(true)
  updates         Boolean   @default(true)
  billing_alerts  Boolean   @default(true)
  email           Boolean   @default(true)
  in_app          Boolean   @default(true)
  user_id         String    @db.Char(36)

  user             user      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model plan {
  id             String  @id @default(uuid()) @db.Char(36)
  name           String  @db.VarChar(20)
  price          Int     @db.Int
  billing_cycle  String  @db.VarChar(20)
  description    String  @db.Text

  subscription   subscription[]
}

model subscription {
  id          String     @id @default(uuid()) @db.Char(36)
  start_date  DateTime?  @db.Timestamp(0) @default(now())
  end_date    DateTime?  @db.Timestamp(0)
  status      String     @db.VarChar(20)
  user_id     String     @db.Char(36)
  plan_id     String     @db.Char(36)

  user        user       @relation(fields: [user_id], references: [id])
  plan        plan       @relation(fields: [plan_id], references: [id])

  @@index([user_id])
  @@index([plan_id])

}

model role {
  id           String    @id @default(uuid()) @db.Char(36)
  title        String    @db.VarChar(25)
  description  String?   @db.Text
  created_at   DateTime  @default(now()) @db.Timestamp(0) 
  created_by   String?   @db.Char(36)

  creator      user?     @relation("RoleCreator", fields: [created_by], references: [id])
  user         user[]    @relation("UserRole")

  @@index([created_by])
}